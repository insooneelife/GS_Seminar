// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_INGAMEUSERDATA_DATA_H_
#define FLATBUFFERS_GENERATED_INGAMEUSERDATA_DATA_H_

#include "flatbuffers/flatbuffers.h"

#include "UserData_generated.h"

namespace Data {

struct InGameUserData;

struct InGameUserData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER = 4,
    VT_CHARACTER = 6
  };
  const Data::UserData *user() const { return GetPointer<const Data::UserData *>(VT_USER); }
  int32_t character() const { return GetField<int32_t>(VT_CHARACTER, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER) &&
           verifier.VerifyTable(user()) &&
           VerifyField<int32_t>(verifier, VT_CHARACTER) &&
           verifier.EndTable();
  }
};

struct InGameUserDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user(flatbuffers::Offset<Data::UserData> user) { fbb_.AddOffset(InGameUserData::VT_USER, user); }
  void add_character(int32_t character) { fbb_.AddElement<int32_t>(InGameUserData::VT_CHARACTER, character, 0); }
  InGameUserDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  InGameUserDataBuilder &operator=(const InGameUserDataBuilder &);
  flatbuffers::Offset<InGameUserData> Finish() {
    auto o = flatbuffers::Offset<InGameUserData>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<InGameUserData> CreateInGameUserData(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Data::UserData> user = 0,
    int32_t character = 0) {
  InGameUserDataBuilder builder_(_fbb);
  builder_.add_character(character);
  builder_.add_user(user);
  return builder_.Finish();
}

inline const Data::InGameUserData *GetInGameUserData(const void *buf) { return flatbuffers::GetRoot<Data::InGameUserData>(buf); }

inline bool VerifyInGameUserDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Data::InGameUserData>(nullptr); }

inline void FinishInGameUserDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Data::InGameUserData> root) { fbb.Finish(root); }

}  // namespace Data

#endif  // FLATBUFFERS_GENERATED_INGAMEUSERDATA_DATA_H_
